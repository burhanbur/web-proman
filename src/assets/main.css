@import './base.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Design tokens: expose primary color as CSS variables so components
   can use the same tone regardless of theme. Primary matches
   `tailwind.config.cjs` primary. */
:root {
  --color-primary-50: #e8f7f9;
  --color-primary-100: #d1eff2;
  --color-primary-200: #a7e0e6;
  --color-primary-300: #7dd1da;
  --color-primary-400: #4fc3cf;
  --color-primary-500: #17a2b8;
  --color-primary-600: #128f9f;
  --color-primary-700: #0f6b78;
  --color-primary-800: #0b4950;
  --color-primary-900: #07282a;

  /* Success colors */
  --color-success-50: #f0fdf4;
  --color-success-100: #dcfce7;
  --color-success-200: #bbf7d0;
  --color-success-300: #86efac;
  --color-success-400: #4ade80;
  --color-success-500: #22c55e;
  --color-success-600: #16a34a;
  --color-success-700: #15803d;
  --color-success-800: #166534;
  --color-success-900: #14532d;
}

/* Backwards-compatible aliases used across components/layouts.
   These map to the semantic tokens in `base.css` so theme toggles
   (html.dark) automatically update dropdowns, headers, etc. */
:root {
  --bg-0: var(--color-background);
  --bg-1: var(--color-background-soft);
  --text-color: var(--color-text);
  --border-color: var(--color-border);
}

/* Ensure theme (dark) class doesn't override primary token unintentionally */
html.dark {
  --color-primary-50: #e8f7f9;
  --color-primary-100: #d1eff2;
  --color-primary-200: #a7e0e6;
  --color-primary-300: #7dd1da;
  --color-primary-400: #4fc3cf;
  --color-primary-500: #17a2b8;
  --color-primary-600: #128f9f;
  --color-primary-700: #0f6b78;
  --color-primary-800: #0b4950;
  --color-primary-900: #07282a;

  /* dark theme semantic tokens - use Tailwind gray tones to match provided values */
  --color-background: #111827; /* Tailwind bg-gray-900 (rgb(17 24 39)) */
  --color-background-soft: #1f2937; /* Tailwind bg-gray-800 (rgb(31 41 55)) */
  --color-text: #e6f2f5; /* readable but soft */
  --color-border: rgba(255,255,255,0.06);
  --color-muted: #9fb3ba;

  /* aliases used by existing components/layouts so they pick up immediately */
  --bg-0: var(--color-background);
  --bg-1: var(--color-background-soft);
  --text-color: var(--color-text);
  --border-color: var(--color-border);
}

/* Header branding and icon tones for light theme
   - logo/brand: primary-500
   - small icons / header buttons: primary-700
   These rules target the header elements when the root html does NOT have the .dark class. */
html:not(.dark) .topbar .brand { color: var(--color-primary-500); }

html:not(.dark) .topbar .theme-toggle,
html:not(.dark) .topbar .notification-button,
html:not(.dark) .topbar .profile-button,
html:not(.dark) .topbar .burger,
html:not(.dark) .topbar .notification-button .svg,
html:not(.dark) .topbar .theme-toggle svg,
html:not(.dark) .topbar .profile-button svg {
  color: var(--color-primary-700);
}

/* Ensure burger bars use primary tone on light theme */
html:not(.dark) .topbar .burger,
html:not(.dark) .topbar .burger::before,
html:not(.dark) .topbar .burger::after {
  background: var(--color-primary-700) !important;
}

/* Notification unread state uses a pale primary background in light theme */
html:not(.dark) .topbar .notification-button.has-unread {
  background: var(--color-primary-50);
  color: var(--color-primary-700);
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  font-weight: normal;
}

/* When using the full app layout, opt out of the centered #app container */
body.full-app-layout #app {
  display: block !important;
  grid-template-columns: none !important;
  max-width: 100% !important;
  width: 100% !important;
  padding: 0 !important;
  margin: 0 !important;
}

/* At large breakpoints the app may switch to a two-column grid; ensure
   full-app-layout forces a single full-bleed column everywhere. */
@media (min-width: 1024px) {
  body.full-app-layout #app {
    display: block !important;
    grid-template-columns: none !important;
    max-width: 100vw !important;
    width: 100vw !important;
    padding: 0 !important;
  }
}

a,
.green {
  text-decoration: none;
  color: hsla(160, 100%, 37%, 1);
  transition: 0.4s;
  padding: 3px;
}

@media (hover: hover) {
  a:hover {
    background-color: hsla(160, 100%, 37%, 0.2);
  }
}

@media (min-width: 1024px) {
  body {
    display: flex;
    place-items: center;
  }

  /* Default app layout is two-column, but when showing auth pages
     (login/register) we want a full-width centered card. The
     `.auth-page` class is added to <body> by `AuthLayout.vue`. */
  #app {
    display: grid;
    grid-template-columns: 1fr 1fr;
    padding: 0 2rem;
  }

  /* Make auth pages span the full app width and center content */
  html.auth-page body, body.auth-page {
    display: block !important;
  }

  html.auth-page #app, body.auth-page #app, .auth-wrapper #app {
    display: block !important;
    padding: 0 !important;
    max-width: 100% !important;
    grid-template-columns: none !important;
  }

/* When an auth-wrapper is present, ensure the auth layout is full-bleed
   and the global #app grid doesn't constrain its width. */
@media (min-width: 1024px) {
  .auth-wrapper {
    width: 100vw;
    max-width: 100vw;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .auth-wrapper #app {
    display: block;
    max-width: 100%;
  }
}
}

/* Small helper to vertically center the password toggle with the input */
.pw-toggle {
  top: 50% !important;
  transform: translateY(-50%) !important;
}

/* If an auth page is active, disable the two-column app grid so the
   auth card can center and take the full available width. */
body.auth-page {
  display: block;
}

body.auth-page #app {
  display: block;
  max-width: 100%;
  padding: 0;
}

/* Small tweak: ensure the auth layout itself centers properly */
.public-layout {
  min-height: 100vh;
  display: flex;
  align-items: center;
  justify-content: center;
}
